{"name":"Tqrr.GitHub.io","tagline":"","body":"### Hello folks.\r\nI'm the same Tquetski from MIUI forums and maintain the following devices found here:\r\n\r\n\r\n\r\n### Building CyanogenMod 11\r\n_For use with custom firmware from outside of the US such as MIUI, ColorOS, Lewa.._\r\n_Android SDK tools are required, extract them into the home folder before starting._\r\n\r\n**Execute the following in Terminal firstly:**\r\n```\r\n$ texteditor* ~/.bashrc\r\n(gedit in Ubuntu)\r\n```\r\n\r\n\r\n**Add the following entry to the very end of this (maybe blank) file:**\r\n```\r\nexport PATH=$PATH:~/bin:~/ANDROIDSDKFOLDERNAME/tools:~/ANDROIDSDKFOLDERNAME/platform-tools\r\n*ANDROIDSDKFOLDERNAME should be replaced with the name of your downloaded SDK tools folder.\r\n```\r\n\r\n\r\n**With paths now set, save this file and execute the following in terminal:**\r\n```\r\n$ ~/.bashrc\r\n```\r\nThis will commit your changes.\r\n\r\n\r\n**Time to pull your relevant android SDK stuff, execute the following in terminal:**\r\n```\r\n$ android\r\n```\r\nIf .bashrc has been configured correctly, this will launch 'Android SDK Manager'\r\n\r\n\r\n**In Android SDK Manager, Install all the API 19 and 20 packages.**\r\nAgain this will probably take a considerable amount of time; It's a waiting game.\r\n\r\n\r\n**Exit and open a new instance in Terminal, execute the following:**\r\n```\r\n$ mkdir android\r\n$ cd android\r\n```\r\n\r\n\r\n**Install some things that your x64 box will require to build from source, issue this following command in terminal**\r\n```\r\n$ sudo apt-get install bison build-essential curl flex git gnupg gperf libesd0-dev libncurses5-dev libsdl1.2-dev libwxgtk2.8-dev libxml2 libxml2-utils lzop openjdk-6-jdk openjdk-6-jre pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev g++-multilib gcc-multilib lib32ncurses5-dev lib32readline-gplv2-dev lib32z1-dev\r\n```\r\n\r\nWith this, your environment is configured for source-building.\r\n\r\n\r\n**Since your terminal is pointed to the folder where your CyanogenMod source will go; execute the following in terminal:**\r\n```\r\n$ repo init -u git://github.com/CyanogenMod/android.git -b cm-11.0\r\n$ git fetch git://github.com/CyanogenMod/android.git\r\n$ git fetch --tags git://github.com/CyanogenMod/android.git\r\n$ repo sync\r\n```\r\n\r\nThis will take a very long time, best to find something to do for a few hours\r\n\r\n\r\n**Execute the following to \"start\" CyanogenMods building environment**\r\n```\r\n$ . build/envsetup.sh\r\n```\r\n\r\n\r\n**Issue the following and check the Build ID**\r\n```\r\n$ make clean\r\n```\r\n\r\nIf the build ID matches your MIUI donor, you have properly aligned with the codebase used to build it (probably, some code-bases have more than 1 revision under the same 'Build ID, this may take some practice'\r\n\r\n\r\n**Find your device code-name.**\r\n\r\nFor this I'm going to talk about the Moto MSM8960; issue the following in terminal:\r\n```\r\n$ breakfast devicename (for HTC, breakfast moto_msm8960)\r\n```\r\nAgain, if this is your first time building for the device you will have to wait for Cyanogen to pull the kernel and device files from repo.\r\n\r\n...Almost ready! Head over to TheMuppets and obtain the vendor files for your device.\r\n\r\n\r\n**Navigate to your Device folder (device/motorola/msm_8960)**\r\nAnd and open 'Boardconfig', find the Kernel your device uses:\r\n```\r\n    TARGET_KERNEL_SOURCE := kernel/motorola/msm8960dt-common\r\n\r\n    TARGET_KERNEL_CONFIG := msm8960_mmi_defconfig\r\n    TARGET_KERNEL_SELINUX_CONFIG := msm8960_mmi_selinux_defconfig\r\n```\r\nFor moto_msm8960, SELinux is in it's own config file; for some devices without a SELinux specific one you must refer to just the 'Target_Kernel_Config'\r\n\r\nIt may be possible to turn SELinux off in device configs by changing the following:\r\n```\r\n    android.boot.selinux=disabled\r\n```\r\n\r\nBut to be safe, kill it in Kernel configs.\r\n\r\n\r\n**Search for the def_config of your device and turn SELinux off.**\r\n\r\nThe moto_msm8960 uses \"msm8960_mmi_selinux_defconfig\" for example so in 'Kernel/Motorola/msm8960-dt/arch/arm/configs' I will find this file. Change the following entry to \"N\"\r\n```\r\n    CONFIG_SECURITY_SELINUX=n\r\n```\r\n\r\nMake sure your 'Vendor' files following the correct format for your device\r\n\r\n```\r\n(Vendor/Motorola/msm_8960) <- Example\r\n```\r\n\r\n\r\n**Open a new terminal and execute the following:**\r\n```\r\n$ . build/envsetup.sh\r\n$ breakfast devicename\r\n$ brunch devicename\r\n```\r\n\r\n\r\n**Get ready to wait for a long time.**\r\nAfter flash the 'CyanogenMod' .zip created and check in 'About Phone' to make sure you've killed SELinux; If everything went well this firmware may now be used in PatchROM as well.\r\n\r\n\r\n**NOTE:**\r\n**After building for a device, subsequent builds will take less time unless 'make clean' is issued.**","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}